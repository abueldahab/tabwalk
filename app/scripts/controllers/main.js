// Generated by CoffeeScript 1.6.3
(function() {
  "use strict";
  var controller, onError,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  onError = function(error) {
    return console.log(error);
  };

  controller = function(params, scope, ngTableParams, $filter, timeout) {
    var alter, fromRank, getData, initTable, load, onSuccess, query, refreshSeconds, reloader, toRank, userRating, venueUid, x;
    venueUid = parseInt(params.venue, 10);
    fromRank = parseFloat(params.from);
    toRank = parseFloat(params.to);
    refreshSeconds = 1000 * parseInt(params.refresh, 10);
    userRating = Parse.Object.extend("UserRating");
    query = new Parse.Query(userRating);
    query.equalTo('venueUid', venueUid);
    scope.entities = [];
    scope.availableRatings = (function() {
      var _i, _results;
      _results = [];
      for (x = _i = 1.0; 0.1 > 0 ? _i <= 5.0 : _i >= 5.0; x = _i += 0.1) {
        _results.push(parseFloat(x.toFixed(1)));
      }
      return _results;
    })();
    console.log(scope.availableRatings);
    alter = function(data) {
      var lastRank, lastRating, results, userDevicesElements;
      results = {};
      _.each(data, function(e) {
        var key, o, _ref;
        key = e.get('objectType') + e.get('uid');
        if (!results[key]) {
          return results[key] = {
            venueUid: e.get('venueUid'),
            title: e.get('title'),
            rating: e.get('rating'),
            ratings: [e.get('rating')],
            uid: e.get('uid'),
            userDevices: [e.get('userDeviceId')]
          };
        } else {
          o = results[key];
          o.ratings.push(e.get('rating'));
          if (_ref = e.get('userDeviceId'), __indexOf.call(o.userDevices, _ref) < 0) {
            o.userDevices.push(e.get('userDeviceId'));
          }
          o.rating = _.reduce(o.ratings, function(a, b) {
            return a + b;
          }) / o.ratings.length;
          return o.rating = parseFloat(o.rating.toFixed(1));
        }
      });
      data = _.values(results);
      data = _.sortBy(data, 'rating').reverse();
      lastRating = -1;
      lastRank = 1;
      data = _.map(data, function(e, i) {
        if (e.rating === lastRating) {
          e.rank = lastRank;
        } else {
          e.rank = i + 1;
          lastRating = e.rating;
          lastRank = e.rank;
        }
        return e;
      });
      data = _.filter(data, function(e) {
        var _ref;
        console.log(e.rank);
        return (fromRank <= (_ref = e.rank) && _ref <= toRank);
      });
      scope.rates = 0;
      userDevicesElements = [];
      _.each(data, function(e) {
        scope.rates += e.ratings.length;
        return userDevicesElements = userDevicesElements.concat(e.userDevices);
      });
      scope.userDevices = _.uniq(userDevicesElements).length;
      return data;
    };
    onSuccess = function(data) {
      scope.entities = alter(data);
      return scope.ratingsTable.reload();
    };
    getData = function() {
      return scope.entities || [];
    };
    initTable = function() {
      return scope.ratingsTable = new ngTableParams({
        page: 1,
        count: 10,
        sorting: {
          datetime: 'desc'
        }
      }, {
        total: function() {
          return getData().length;
        },
        getData: function($defer, params) {
          var data, orderedData;
          data = getData();
          orderedData = (params.filter() ? $filter("filter")(data, params.filter()) : data);
          scope.list = orderedData != null ? orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()) : void 0;
          params.total(orderedData != null ? orderedData.length : void 0);
          $defer.resolve(scope.list);
          return setTimeout(function() {
            return scope.$apply(function() {
              return $('.star').rating();
            });
          }, 10);
        },
        scope: {
          $data: {}
        }
      });
    };
    load = function() {
      return query.find({
        success: onSuccess,
        error: onError
      });
    };
    load();
    initTable();
    reloader = function() {
      timeout(reloader, refreshSeconds);
      console.log('reloading...');
      return load();
    };
    return reloader();
  };

  angular.module("tapwalkdevApp").controller("MainCtrl", ['$routeParams', '$scope', 'ngTableParams', '$filter', '$timeout', controller]);

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
